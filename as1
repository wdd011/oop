class HealthProfessional {
    int id;
    String name;
    String description;

    public HealthProfessional() {
    }

    public HealthProfessional(int id, String name, String description) {
        this.id = id;
        this.name = name;
        this.description = description;
    }

    
    public void printDetails() {
        System.out.println("ID: " + id);
        System.out.println("Name: " + name);
        System.out.println("Description: " + description);
    }
}

class GeneralPractitioner extends HealthProfessional {
    public GeneralPractitioner() {
    }

    public GeneralPractitioner(int id, String name, String description) {
        super(id, name, description);
    }

    @Override
    public void printDetails() {
        super.printDetails();
        System.out.println("Specialty: HealthProfessional");
    }
}

class Surgeon extends HealthProfessional {

    final String specialty = "Surgeon";

    public Surgeon() {

    }

    public Surgeon(int id, String name, String description) {
        super(id, name, description);
    }

    @Override
    public void printDetails() {
        super.printDetails();
        System.out.println("Specialty: " + this.specialty);
    }
}

class Appointment {

    String name;
    String phone;
    String time;
    HealthProfessional doctor;

    public Appointment() {

    }

    public Appointment(String name, String phone, String time, HealthProfessional doctor) {
        this.name = name;
        this.phone = phone;
        this.time = time;
        this.doctor = doctor;
    }

    public void printDetails() {
        System.out.println("Patient Name: " + name);
        System.out.println("Patient Phone: " + phone);
        System.out.println("Time: " + time);
        System.out.print("Doctor: ");
        doctor.printDetails();
    }
}
// "AssignmentOne";
public class AssignmentOne {

    private static ArrayList<Appointment> appointments = new ArrayList<>();

    public static void main(String[] args) {

        System.out.println("第三部分");
        GeneralPractitioner General1 = new GeneralPractitioner(1, "Dr. Anna Taylor", "Family medicine specialist");
        GeneralPractitioner General2 = new GeneralPractitioner(1, "Dr. James Miller", "General health care provider");
        GeneralPractitioner General3 = new GeneralPractitioner(1, "Dr. Laura Wilson", "Focuses on preventive care");
        Surgeon Surgeon1 = new Surgeon(4, "Dr. John Smith", "Expert in heart surgery");
        Surgeon Surgeon2 = new Surgeon(5, "Dr. Emily White", "Specializes in brain surgery");
  
        General1.printDetails();
        System.out.println("------------------------------");
        General2.printDetails();
        System.out.println("------------------------------");
        General3.printDetails();
        System.out.println("------------------------------");
        Surgeon1.printDetails();
        System.out.println("------------------------------");
        Surgeon2.printDetails();
        System.out.println("------------------------------");


        System.out.println("第五部分");
        createAppointment("Alice Johnson", "123-456-7890", "2024-11-13 10:00", General1);
        createAppointment("Bob Smith", "987-654-3210", "2024-11-13 11:30", General2);
        createAppointment("Charlie Brown", "555-123-4567", "2024-11-13 14:00", Surgeon1);
        createAppointment("David Lee", "444-987-6543", "2024-11-13 15:30", Surgeon2);
       
        printExistingAppointments();
    
        cancelBooking("123-456-7890");
  
        printExistingAppointments();
    
        cancelBooking("000-000-0000");
    }


    public static void createAppointment(String name, String phone, String time, HealthProfessional health) {
        Appointment appointment = new Appointment(name, phone, time, health);
        appointments.add(appointment);
        System.out.println("createAppointment success!");
    }

  
    public static void printExistingAppointments() {
        if (appointments.isEmpty()) {
            System.out.println("appointments is empty");
            return;
        }
        for (int i = 0; i < appointments.size(); i++) {
            appointments.get(i).printDetails();
            System.out.println("------------------------------");
        }
    }


    public static void cancelBooking(String phone) {
        boolean bool = false;
        for (int i = 0; i < appointments.size(); i++) {
            if (appointments.get(i).phone.equals(phone)) {
                appointments.remove(i);
                bool = true;
                break;
            }
        }
        if (bool) {
            System.out.println("cancel success: " + phone);
            System.out.println("------------------------------");

        }else{
            System.out.println("cancel error: " + phone);
            System.out.println("------------------------------");
        }
    }
}

